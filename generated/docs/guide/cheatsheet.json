{"id":"guide/cheatsheet","title":"Cheat Sheet","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/cheatsheet.md?message=docs%3A%20請簡述你的修改...\" aria-label=\"提供編輯建議\" title=\"提供編輯建議\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <div class=\"center-layout-wide\">\n<h1 class=\"no-toc\" id=\"cheat-sheet\" translation-result=\"on\">速查表<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cheatsheet#cheat-sheet\"><i class=\"material-icons\">link</i></a></h1><h1 class=\"no-toc\" translation-origin=\"off\">Cheat Sheet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/cheatsheet#cheat-sheet\"><i class=\"material-icons\">link</i></a></h1>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">引導</nt-wrapper><nt-wrapper translation-origin=\"off\">Bootstrapping</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a></code> from <code>@angular/platform-browser-dynamic</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule); </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 中指定的根元件進行啟動。</nt-wrapper><nt-wrapper translation-origin=\"off\">Bootstraps the application, using the root component from the specified <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">NgModules</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> from <code>@angular/core</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({ \n&nbsp; declarations: …, \n&nbsp; imports: …, \n&nbsp; exports: …, \n&nbsp; providers: …, \n&nbsp; bootstrap: … \n}) \nclass MyModule {} </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">定義一個模組，其中可以包含元件、指令、管道和服務提供者。</nt-wrapper><nt-wrapper translation-origin=\"off\">Defines a module that contains components, directives, pipes, and providers.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> declarations: [ \n&nbsp; MyRedComponent, \n&nbsp; MyBlueComponent, \n&nbsp; MyDatePipe \n] </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">屬於當前模組的元件、指令和管道的列表。</nt-wrapper><nt-wrapper translation-origin=\"off\">List of components, directives, and pipes that belong to this module.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> imports: [ \n&nbsp; <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, \n&nbsp; SomeOtherModule \n] </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">本模組所匯入的模組列表。</nt-wrapper><nt-wrapper translation-origin=\"off\">List of modules to import into this module. Everything from the imported modules is available to <code>declarations</code> of this module.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> exports: [ \n&nbsp; MyRedComponent, \n&nbsp; MyDatePipe \n] </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">那些匯入了本模組的模組所能看到的元件、指令和管道的列表。</nt-wrapper><nt-wrapper translation-origin=\"off\">List of components, directives, and pipes visible to modules that import this module.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> providers: [ \n&nbsp; MyService, \n&nbsp; { provide: … } \n] </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">依賴注入提供者的列表，本模組以及本模組匯入的所有模組中的內容都可以看見它們。</nt-wrapper><nt-wrapper translation-origin=\"off\">List of dependency injection providers visible both to the contents of this module and to importers of this module.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> bootstrap: [MyAppComponent] </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當本模組啟動時，隨之啟動的元件列表。</nt-wrapper><nt-wrapper translation-origin=\"off\">List of components to bootstrap when this module is bootstrapped.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">範本語法</nt-wrapper><nt-wrapper translation-origin=\"off\">Template syntax</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;input [value]=\"firstName\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把 <code>value</code> 屬性繫結到表示式 <code>firstName</code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Binds property <code>value</code> to the result of expression <code>firstName</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [attr.role]=\"myAriaRole\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把屬性（Attribute）<code>role</code> 繫結到表示式 <code>myAriaRole</code> 的結果。</nt-wrapper><nt-wrapper translation-origin=\"off\">Binds attribute <code>role</code> to the result of expression <code>myAriaRole</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [class.extra-sparkle]=\"isDelightful\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">根據 <code>isDelightful</code> 表示式的結果是否為真，決定 CSS 類 <code>extra-sparkle</code> 是否出現在當前元素上。</nt-wrapper><nt-wrapper translation-origin=\"off\">Binds the presence of the CSS class <code>extra-sparkle</code> on the element to the truthiness of the expression <code>isDelightful</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [style.width.px]=\"mySize\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把 CSS 樣式屬性 <code>width</code> 的 px（畫素）值繫結到表示式 <code>mySize</code> 的結果。單位是可選的。</nt-wrapper><nt-wrapper translation-origin=\"off\">Binds style property <code>width</code> to the result of expression <code>mySize</code> in pixels. Units are optional.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;button (click)=\"readRainbow($event)\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當這個按鈕元素（及其子元素）上的 click 事件觸發時，呼叫方法 <code>readRainbow</code>，並把這個事件物件作為引數傳進去。</nt-wrapper><nt-wrapper translation-origin=\"off\">Calls method <code>readRainbow</code> when a click event is triggered on this button element (or its children) and passes in the event object.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div title=\"Hello {{ponyName}}\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">將屬性繫結到插值字串，比如“Hello Seabiscuit”。等效於：<code-example format=\"html\" hidecopy=\"\" language=\"html\">&lt;div [title]=\"'Hello ' + ponyName\"&gt;</code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">Binds a property to an interpolated string, for example, \"Hello Seabiscuit\". Equivalent to: <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [title]=\"'Hello ' + ponyName\"&gt; </code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;p&gt; \n&nbsp; Hello {{ponyName}} \n&lt;/p&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把文字內容繫結到插值字串（如\"Hello Seabiscuit\"）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Binds text content to an interpolated string, for example, \"Hello Seabiscuit\".</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;my-cmp [(title)]=\"name\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">建立雙向資料繫結。等效於：<code-example format=\"html\" hidecopy=\"\" language=\"html\">&lt;my-cmp [title]=\"name\" (titleChange)=\"name=$event\"&gt;</code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">Sets up two-way data binding. Equivalent to: <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;my-cmp [title]=\"name\" (titleChange)=\"name=$event\"&gt; </code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;video #movieplayer …&gt;&lt;/video&gt; \n&lt;button (click)=\"movieplayer.play()\"&gt; \n&nbsp; Play \n&lt;/button&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">建立一個區域變數 <code>movieplayer</code>，支援在當前範本的資料繫結和事件繫結表示式中存取 <code>video</code> 元素的例項。</nt-wrapper><nt-wrapper translation-origin=\"off\">Creates a local variable <code>movieplayer</code> that provides access to the <code>video</code> element instance in data-binding and event-binding expressions in the current template.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;p *myUnless=\"myExpression\"&gt; \n&nbsp; … \n&lt;/p&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">星號 ( <code>*</code> ) 字元將當前元素轉換為嵌入式範本。等效於：<code-example format=\"html\" hidecopy=\"\" language=\"html\">&lt;ng-template [myUnless]=\"myExpression\"&gt; &lt;p&gt; … &lt;/p&gt; &lt;/ng-template&gt;</code-example></nt-wrapper><nt-wrapper translation-origin=\"off\">The asterisk (<code>*</code>) character turns the current element into an embedded template. Equivalent to: <code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;ng-template [myUnless]=\"myExpression\"&gt; \n&nbsp; &lt;p&gt; \n&nbsp;&nbsp;&nbsp; … \n&nbsp; &lt;/p&gt; \n&lt;/ng-template&gt; </code-example></nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;p&gt; \n&nbsp; Card No.: {{cardNumber | myCardNumberFormatter}} \n&lt;/p&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用名為 <code>myCardNumberFormatter</code> 的管道轉換表示式 <code>cardNumber</code> 的當前值。</nt-wrapper><nt-wrapper translation-origin=\"off\">Transforms the current value of expression <code>cardNumber</code> using the pipe called <code>myCardNumberFormatter</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;p&gt; \n&nbsp; Employer: {{employer?.companyName}} \n&lt;/p&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">安全導航運運算元（<code>?</code>）表示 <code>employer</code> 欄位是可選的，如果它是 <code>undefined</code>，那麼表示式其餘的部分就會被忽略，並返回 <code>undefined</code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">The safe navigation operator (<code>?</code>) means that the <code>employer</code> field is optional and if <code>undefined</code>, the rest of the expression should be ignored.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;svg:rect x=\"0\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y=\"0\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; width=\"100\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; height=\"100\"/&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">範本中的 SVG 片段需要給它的根元素加上 <code>svg:</code> 字首，以便把 SVG 元素和 HTML 元素區分開。</nt-wrapper><nt-wrapper translation-origin=\"off\">An SVG snippet template needs an <code>svg:</code> prefix on its root element to disambiguate the SVG element from an HTML component.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;svg&gt; \n&nbsp; &lt;rect x=\"0\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y=\"0\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; width=\"100\" \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; height=\"100\"/&gt; \n&lt;/svg&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">以 <code>&lt;svg&gt;</code> 作為根元素時會自動識別為 SVG 元素，不需要字首。</nt-wrapper><nt-wrapper translation-origin=\"off\">An <code>&lt;svg&gt;</code> root element is detected as an SVG element automatically, without the prefix.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">內建指令</nt-wrapper><nt-wrapper translation-origin=\"off\">Built-in directives</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> from <code>@angular/common</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;section *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"showSection\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">根據 <code>showSection</code> 表示式的結果，移除或重新建立 DOM 樹的一部分。</nt-wrapper><nt-wrapper translation-origin=\"off\">Removes or recreates a portion of the DOM tree based on the <code>showSection</code> expression.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of list\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">將 <code>li</code> 元素及其內容轉換為範本，並用它來例項化列表中的每個條目的檢視。</nt-wrapper><nt-wrapper translation-origin=\"off\">Turns the <code>li</code> element and its contents into a template, and uses that to instantiate a view for each item in list.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"conditionExpression\"&gt;\n&nbsp; &lt;ng-template [<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>]=\"case1Exp\"&gt; \n&nbsp;&nbsp;&nbsp; … \n&nbsp; &lt;/ng-template&gt;\n&nbsp; &lt;ng-template <a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"case2LiteralString\"&gt; \n&nbsp;&nbsp;&nbsp; … \n&nbsp; &lt;/ng-template&gt;\n&nbsp; &lt;ng-template <a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>&gt; \n&nbsp;&nbsp;&nbsp; … \n&nbsp; &lt;/ng-template&gt; \n&lt;/div&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">透過根據 <code>conditionExpression</code> 的當前值選擇嵌入式範本之一，有條件地交換 <code>div</code> 的內容。</nt-wrapper><nt-wrapper translation-origin=\"off\">Conditionally swaps the contents of the <code>div</code> by selecting one of the embedded templates based on the current value of <code>conditionExpression</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'active': isActive, \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'disabled': isDisabled}\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">將元素上存在的 CSS 類繫結到關聯的對映值的真實性。右側的表示式應返回 <code>{class-name: true/false}</code> 對映表。</nt-wrapper><nt-wrapper translation-origin=\"off\">Binds the presence of CSS classes on the element to the truthiness of the associated map values. The right-hand expression should return <code>{class-name: true/false}</code> map.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"{'property': 'value'}\"&gt; \n&lt;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"dynamicStyles()\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">允許你使用 CSS 為 HTML 元素指定樣式。你可以像第一個例子那樣直接使用 CSS，也可以呼叫元件中的方法。</nt-wrapper><nt-wrapper translation-origin=\"off\">Allows you to assign styles to an HTML element using CSS. You can use CSS directly, as in the first example, or you can call a method from the component.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">表單</nt-wrapper><nt-wrapper translation-origin=\"off\">Forms</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> from <code>@angular/forms</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"userName\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">為表單控制項提供雙向資料繫結、解析和驗證功能。</nt-wrapper><nt-wrapper translation-origin=\"off\">Provides two-way data-binding, parsing, and validation for form controls.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">類裝飾器</nt-wrapper><nt-wrapper translation-origin=\"off\">Class decorators</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, … } from '@angular/core'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, &amp;hellip;</code> from <code>@angular/core';</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({…}) \nclass MyComponent() {} </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">宣告一個類別是元件，並提供該元件的元資料。</nt-wrapper><nt-wrapper translation-origin=\"off\">Declares that a class is a component and provides metadata about the component.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({…}) \nclass MyDirective() {} </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">宣告一個類別是指令，並提供該指令的元資料。</nt-wrapper><nt-wrapper translation-origin=\"off\">Declares that a class is a directive and provides metadata about the directive.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({…}) \nclass MyPipe() {} </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">宣告一個類別是管道，並提供該管道的元資料。</nt-wrapper><nt-wrapper translation-origin=\"off\">Declares that a class is a pipe and provides metadata about the pipe.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>() \nclass MyService() {} </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">宣告某個類可以註冊為提供者，並能被另一個類別注入。如果沒有該裝飾器，編譯器就不會產生足夠的元資料，當它被注入到別處時，就無法正常建立該類別。</nt-wrapper><nt-wrapper translation-origin=\"off\">Declares that a class can be provided and injected by other classes. Without this decorator, the compiler won't generate enough metadata to allow the class to be created properly when it's injected somewhere.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">指令配置項</nt-wrapper><nt-wrapper translation-origin=\"off\">Directive configuration</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ \n&nbsp; property1: value1, \n&nbsp; … \n}) </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">將具有 <code>value1</code> 值的 <code>property1</code> 屬性新增到指令。</nt-wrapper><nt-wrapper translation-origin=\"off\">Add <code>property1</code> property with <code>value1</code> value to Directive.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> selector: '.cool-button:not(a)' </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">指定一個 CSS 選擇器，該選擇器在範本中標識此指令。支援的選擇器包括 <code>element</code> 、 <code>[attribute]</code> 、 <code>.class</code> 和 <code>:not()</code>。<br>不支援父子關係選擇器。</nt-wrapper><nt-wrapper translation-origin=\"off\">Specifies a CSS selector that identifies this directive within a template. Supported selectors include <code>element</code>, <code>[attribute]</code>, <code>.class</code>, and <code>:not()</code>. <br> Does not support parent-child relationship selectors.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> providers: [ \n&nbsp; MyService, \n&nbsp; { provide: … } \n] </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">該指令及其子指令的依賴注入提供者列表。</nt-wrapper><nt-wrapper translation-origin=\"off\">List of dependency injection providers for this directive and its children.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">元件配置 <br> <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 擴充了 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>, 所以 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 的配置也同樣適用於元件</nt-wrapper><nt-wrapper translation-origin=\"off\">Component configuration <br> <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> extends <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>, so the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> configuration applies to components as well</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> moduleId: module.id </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">如果設定了，那麼 <code>templateUrl</code> 和 <code>styleUrl</code> 的路徑就會相對於當前元件進行解析。</nt-wrapper><nt-wrapper translation-origin=\"off\">If set, the <code>templateUrl</code> and <code>styleUrl</code> are resolved relative to the component.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> viewProviders: [MyService, { provide: … }] </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">依賴注入提供者列表，但它們的範圍被限定為當前元件的檢視。</nt-wrapper><nt-wrapper translation-origin=\"off\">List of dependency injection providers scoped to this component's view.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> template: 'Hello {{name}}' \ntemplateUrl: 'my-component.html' </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當前元件檢視的內聯範本或外部範本的 URL。</nt-wrapper><nt-wrapper translation-origin=\"off\">Inline template or external template URL of the component's view.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> styles: ['.primary {color: red}'] \nstyleUrls: ['my-component.css'] </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用於為當前元件的檢視提供樣式的內聯 CSS 或外部樣式表 URL 的列表。</nt-wrapper><nt-wrapper translation-origin=\"off\">List of inline CSS styles or external stylesheet URLs for styling the component's view.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">給指令和元件使用的類屬性配置項</nt-wrapper><nt-wrapper translation-origin=\"off\">Class field decorators for directives and components</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, … } from '@angular/core'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, ...</code> from <code>@angular/core</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() myProperty; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">宣告一個你可以用屬性繫結來更新的輸入屬性（比如：<code>&amp;lt;my-cmp [myProperty]=\"someExpression\"&amp;gt;</code>）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Declares an input property that you can update using property binding (example: <code>&lt;my-cmp [myProperty]=\"someExpression\"&gt;</code>).</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() myEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>(); </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">宣告一個輸出屬性，該屬性會觸發你可以用事件繫結訂閱的事件（比如：<code>&amp;lt;my-cmp (myEvent)=\"doSomething()\"&amp;gt;</code>）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Declares an output property that fires events that you can subscribe to with an event binding (example: <code>&lt;my-cmp (myEvent)=\"doSomething()\"&gt;</code>).</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('class.valid') isValid; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把宿主元素的一個屬性（這裡是 CSS 類 <code>valid</code>）繫結到指令或元件上的 <code>isValid</code> 屬性。</nt-wrapper><nt-wrapper translation-origin=\"off\">Binds a host element property (here, the CSS class <code>valid</code>) to a directive/component property (<code>isValid</code>).</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('click', ['$event']) onClick(e) {…} </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用指令或元件上的 <code>onClick</code> 方法訂閱宿主元素上的 <code>click</code> 事件，並從中獲取 <code>$event</code> 引數（可選）。</nt-wrapper><nt-wrapper translation-origin=\"off\">Subscribes to a host element event (<code>click</code>) with a directive/component method (<code>onClick</code>), optionally passing an argument (<code>$event</code>).</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(myPredicate) myChildComponent; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把元件內容查詢（<code>myPredicate</code>）的第一個結果繫結到該類別的 <code>myChildComponent</code> 屬性上。</nt-wrapper><nt-wrapper translation-origin=\"off\">Binds the first result of the component content query (<code>myPredicate</code>) to a property (<code>myChildComponent</code>) of the class.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ContentChildren\" class=\"code-anchor\">ContentChildren</a>(myPredicate) myChildComponents; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把元件內容查詢（<code>myPredicate</code>）的全部結果繫結到該類別的 <code>myChildComponents</code> 屬性上。</nt-wrapper><nt-wrapper translation-origin=\"off\">Binds the results of the component content query (<code>myPredicate</code>) to a property (<code>myChildComponents</code>) of the class.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(myPredicate) myChildComponent; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把元件檢視查詢（<code>myPredicate</code>）的第一個結果繫結到該類別的 <code>myChildComponent</code> 屬性上。對指令無效。</nt-wrapper><nt-wrapper translation-origin=\"off\">Binds the first result of the component view query (<code>myPredicate</code>) to a property (<code>myChildComponent</code>) of the class. Not available for directives.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> @<a href=\"api/core/ViewChildren\" class=\"code-anchor\">ViewChildren</a>(myPredicate) myChildComponents; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把元件檢視查詢（<code>myPredicate</code>）的全部結果繫結到該類別的 <code>myChildComponents</code> 屬性上。對指令無效。</nt-wrapper><nt-wrapper translation-origin=\"off\">Binds the results of the component view query (<code>myPredicate</code>) to a property (<code>myChildComponents</code>) of the class. Not available for directives.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">指令和元件的變更檢測與生命週期鉤子（實現為類別的方法）</nt-wrapper><nt-wrapper translation-origin=\"off\">Directive and component change detection and lifecycle hooks (implemented as class methods)</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> constructor(myService: MyService, …) { … } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在任何其它生命週期鉤子之前呼叫。可以用它來注入依賴項，但不要在這裡做正事。</nt-wrapper><nt-wrapper translation-origin=\"off\">Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnChanges(changeRecord) { … } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">每當輸入屬性發生變化時就會呼叫，但位於處理內容（<code>ng-content</code>）或子檢視之前。</nt-wrapper><nt-wrapper translation-origin=\"off\">Called after every change to input properties and before processing content or child views.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnInit() { … } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">在呼叫完建構函式、初始化完所有輸入屬性並首次呼叫過 <code>ngOnChanges</code> 之後呼叫。</nt-wrapper><nt-wrapper translation-origin=\"off\">Called after the constructor, initializing input properties, and the first call to <code>ngOnChanges</code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngDoCheck() { … } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">每當對元件或指令的輸入屬性進行變更檢測時就會呼叫。可以用它來擴充變更檢測邏輯，執行自訂的檢測邏輯。</nt-wrapper><nt-wrapper translation-origin=\"off\">Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterContentInit() { … } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code>ngOnInit</code> 完成之後，當元件或指令的內容（<code>ng-content</code>）已經初始化完畢時呼叫。</nt-wrapper><nt-wrapper translation-origin=\"off\">Called after <code>ngOnInit</code> when the component's or directive's content has been initialized.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterContentChecked() { … } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">每當元件或指令的內容（<code>ng-content</code>）做變更檢測時呼叫。</nt-wrapper><nt-wrapper translation-origin=\"off\">Called after every check of the component's or directive's content.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterViewInit() { … } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當 <code>ngAfterContentInit</code> 完畢，並且元件的檢視及其子檢視或指令所屬的檢視已經初始化完畢時呼叫。</nt-wrapper><nt-wrapper translation-origin=\"off\">Called after <code>ngAfterContentInit</code> when the component's views and child views / the view that a directive is in has been initialized.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngAfterViewChecked() { … } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當元件的檢視及其子檢視或指令所屬的檢視每次執行變更檢測時呼叫。</nt-wrapper><nt-wrapper translation-origin=\"off\">Called after every check of the component's views and child views / the view that a directive is in.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> ngOnDestroy() { … } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">只在例項被銷燬前呼叫一次。</nt-wrapper><nt-wrapper translation-origin=\"off\">Called once, before the instance is destroyed.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">依賴注入配置項</nt-wrapper><nt-wrapper translation-origin=\"off\">Dependency injection configuration</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyService, useClass: MyMockService } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把 <code>MyService</code> 的服務提供者設定或改寫為 <code>MyMockService</code> 類別。</nt-wrapper><nt-wrapper translation-origin=\"off\">Sets or overrides the provider for <code>MyService</code> to the <code>MyMockService</code> class.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyService, useFactory: myFactory } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把 <code>MyService</code> 的服務提供者設定或改寫為 <code>myFactory</code> 工廠函式。</nt-wrapper><nt-wrapper translation-origin=\"off\">Sets or overrides the provider for <code>MyService</code> to the <code>myFactory</code> factory function.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> { provide: MyValue, useValue: 41 } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">把 <code>MyValue</code> 的服務提供者改寫為一個特定的值 <code>41</code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Sets or overrides the provider for <code>MyValue</code> to the value <code>41</code>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">路由與導航</nt-wrapper><nt-wrapper translation-origin=\"off\">Routing and navigation</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">詳情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> import { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, … } from '@angular/router'; </code-example></td>\n<td align=\"left\">Import <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, ...</code> from <code>@angular/router</code>.</td>\n</tr>\n<tr>\n<td align=\"left\"><nt-wrapper><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> const routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [ \n&nbsp; { path: '', component: HomeComponent }, \n&nbsp; { path: 'path/:routeParam', component: MyComponent }, \n&nbsp; { path: 'staticPath', component: … }, \n&nbsp; { path: '**', component: … }, \n&nbsp; { path: 'oldPath', redirectTo: '/staticPath' }, \n&nbsp; { path: …, component: …, data: { message: 'Custom' } } \n]); \n \nconst routing = RouterModule.forRoot(routes); </code-example></nt-wrapper><nt-wrapper><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> const routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [ \n&nbsp; { path: '', component: HomeComponent }, \n&nbsp; { path: 'path/:routeParam', component: MyComponent }, \n&nbsp; { path: 'staticPath', component: … }, \n&nbsp; { path: '**', component: … }, \n&nbsp; { path: 'oldPath', redirectTo:b '/staticPath' }, \n&nbsp; { path: …, component: …, data: { message: 'Custom' } } \n]); \n \nconst routing = RouterModule.forRoot(routes); </code-example></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">為該應用配置路由。支援靜態、引數化、重新導向和萬用字元路由。也支援自訂路由資料和解析（resolve）函式。</nt-wrapper><nt-wrapper translation-origin=\"off\">Configures routes for the application. Supports static, parameterized, redirect, and wildcard routes. Also supports custom route data and resolve.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt; \n&lt;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> name=\"aux\"&gt;&lt;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">標記出一個位置，用來載入活動路由的元件。</nt-wrapper><nt-wrapper translation-origin=\"off\">Marks the location to load the component of the active route.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\"&gt; \n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path', routeParam ]\"&gt; \n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path', { matrixParam: 'value' } ]\"&gt; \n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" [queryParams]=\"{ page: 1 }\"&gt; \n&lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" fragment=\"anchor\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用路由體系建立一個到其它檢視的連結。路由體系由路由路徑、必要引數、可選引數、查詢引數和文件片段組成。要導航到根路由，請使用 <code>/</code> 字首；要導航到子路由，使用 <code>./</code> 字首；要導航到兄弟路由或父級路由，使用 <code>../</code> 字首。</nt-wrapper><nt-wrapper translation-origin=\"off\">Creates a link to a different view based on a route instruction consisting of a route path, required and optional parameters, query parameters, and a fragment. To navigate to a root route, use the <code>/</code> prefix; for a child route, use the <code>./</code>prefix; for a sibling or parent, use the <code>../</code> prefix.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指向的路由變成活動路由時，為當前元素新增一些類（比如這裡的 <code>active</code>）。</nt-wrapper><nt-wrapper translation-origin=\"off\">The provided classes are added to the element when the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> becomes the current active route.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"html\" hidecopy=\"\" language=\"html\"> &lt;a [<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]=\"[ '/path' ]\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"active\" ariaCurrentWhenActive=\"page\"&gt; </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">當 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 成為當前的活動路由時，提供的類和 <code>aria-current</code> 屬性會新增到元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">The provided classes and <code>aria-current</code> attribute are added to the element when the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> becomes the current active route.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canActivateGuard: <a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a> = \n&nbsp; ( \n&nbsp;&nbsp;&nbsp; route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n&nbsp;&nbsp;&nbsp; state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n&nbsp; ) =&gt; { … } \n \n{ path: …, canActivate: [canActivateGuard] } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一個用來定義函式的介面，表示路由器應該首先呼叫它，以確定是否應該啟用此元件。應該返回一個<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>或解析為<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>的 <code>Observable/Promise</code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">An interface for defining a function that the router should call first to determine if it should activate this component. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canDeactivateGuard: <a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>&lt;T&gt; = \n&nbsp; ( \n&nbsp;&nbsp;&nbsp; component: T, \n&nbsp;&nbsp;&nbsp; route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n&nbsp;&nbsp;&nbsp; state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n&nbsp; ) =&gt; { … } \n \n{ path: …, canDeactivate: [canDeactivateGuard] } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一個用於定義函式的介面，表示路由器應該先呼叫它，以確定是否應該在導航後停用此元件。應該返回一個<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>或解析為<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> 的 <code>Observable/Promise</code></nt-wrapper><nt-wrapper translation-origin=\"off\">An interface for defining a function that the router should call first to determine if it should deactivate this component after a navigation. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canActivateChildGuard: <a href=\"api/router/CanActivateChildFn\" class=\"code-anchor\">CanActivateChildFn</a> = \n&nbsp; ( \n&nbsp;&nbsp;&nbsp; route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n&nbsp;&nbsp;&nbsp; state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n&nbsp; ) =&gt; { … } \n \n{ path: …, canActivateChild: [canActivateGuard], children: … } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一個用於定義函式的介面，表示路由器應該首先呼叫它，以確定是否應該啟用子路由。應該返回一個<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>或解析為<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> 的 <code>Observable/Promise</code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">An interface for defining a function that the router should call first to determine if it should activate the child route. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function resolveGuard implements <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>&lt;T&gt; = \n&nbsp; ( \n&nbsp;&nbsp;&nbsp; route: <a href=\"api/router/ActivatedRouteSnapshot\" class=\"code-anchor\">ActivatedRouteSnapshot</a>, \n&nbsp;&nbsp;&nbsp; state: <a href=\"api/router/RouterStateSnapshot\" class=\"code-anchor\">RouterStateSnapshot</a> \n&nbsp; ) =&gt; { … }  \n \n{ path: …, resolve: [resolveGuard] } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用來定函式的介面。路由器會在渲染該路由之前，首先呼叫它來解析路由資料。應該返回一個值或能解析成值的 <code>Observable/Promise</code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">An interface for defining a function that the router should call first to resolve route data before rendering the route. Should return a value or an Observable/Promise that resolves to a value.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code-example format=\"typescript\" hidecopy=\"\" language=\"typescript\"> function canLoadGuard: <a href=\"api/router/CanLoadFn\" class=\"code-anchor\">CanLoadFn</a> = \n&nbsp; ( \n&nbsp;&nbsp;&nbsp; route: <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> \n&nbsp; ) =&gt; { … } \n \n{ path: …, canLoad: [canLoadGuard], loadChildren: … } </code-example></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">一個定義函式的介面，路由器應該首先呼叫它，以檢查是否應該載入延遲載入的模組。應該返回一個<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>或解析為<code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> 的 <code>Observable/Promise</code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">An interface for defining a function that the router should call first to check if the lazy loaded module should be loaded. Should return a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code> or an Observable/Promise that resolves to a <code>boolean|<a href=\"api/router/UrlTree\" class=\"code-anchor\">UrlTree</a></code>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n</div>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最後複查時間： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgClass\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/core/Component\n - api/core/ContentChild\n - api/core/ContentChildren\n - api/core/Directive\n - api/core/EventEmitter\n - api/core/HostBinding\n - api/core/HostListener\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/Output\n - api/core/Pipe\n - api/core/ViewChild\n - api/core/ViewChildren\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivateChildFn\n - api/router/CanActivateFn\n - api/router/CanDeactivateFn\n - api/router/CanLoadFn\n - api/router/ResolveFn\n - api/router/Route\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterStateSnapshot\n - api/router/Routes\n - api/router/UrlTree\n - guide/cheatsheet#cheat-sheet\n - guide/cheatsheet#速查表\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/cheatsheet.md?message=docs%3A%20請簡述你的修改...\n-->"}